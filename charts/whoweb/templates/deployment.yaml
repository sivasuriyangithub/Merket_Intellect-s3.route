apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "jx.fullname" . }}-app
  labels:
    app: {{ template "jx.name" . }}
    chart: {{ template "jx.chart" . }}
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
  annotations:
    configmap.reloader.stakater.com/reload: "{{.Values.deployment.envConfigMapRef}}"
    secret.reloader.stakater.com/reload: "{{.Values.deployment.envSecretRef}}"
    {{- if .Values.deployment.postgresqlInNamespace }}
    secret.reloader.stakater.com/reload: "{{ .Release.Name }}-postgresql"
    {{- end }}
spec:
  selector:
    matchLabels:
      release: "{{ .Release.Name }}"
      app: {{ template "jx.name" . }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 51%
      maxUnavailable: 25%
  template:
    metadata:
      labels:
        release: "{{ .Release.Name }}"
        chart: {{ template "jx.chart" . }}
        app: {{ template "jx.name" . }}
    spec:
      {{- if .Values.preemptible }}
      tolerations:
      - key: "key"
        operator: "Exists"
        effect: "NoSchedule"
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          args:
            - "/start"
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
          - name: IMAGE
            value: {{ .Values.image.repository }}
          - name: REVISION
            value: {{ .Values.image.tag }}
          - name: ENVIRONMENT_NAME
            value: {{ .Release.Namespace }}
          - name: PUBLIC_ORIGIN
            value: https://{{- template "ingress.url" . }}
          - name: DJANGO_ALLOWED_HOSTS
            value: "{{- template "ingress.url" . -}},{{ .Values.service.name }}"
          - name: DJANGO_SETTINGS_MODULE
            value: {{ .Values.deployment.settingsModule }}
          envFrom:
          {{- range .Values.deployment.envConfigMapRef }}
          - configMapRef:
              name: {{ . }}
          {{- end }}
          - secretRef:
              name: {{ .Values.deployment.envSecretRef }}
          readinessProbe:
            httpGet:
              path: /readiness
              port: 5000
            initialDelaySeconds: 20
            timeoutSeconds: 5
          livenessProbe:
            httpGet:
              path: /liveness
              port: 5000
          ports:
            {{- range $portName, $portConfig := .Values.service.ports }}
            - containerPort: {{ default $portConfig.port $portConfig.targetPort }}
            {{- end }}
          resources:
            requests:
              cpu: {{ .Values.deployment.cpuRequest }}
              memory: {{ .Values.deployment.memoryRequest }}
            limits:
              cpu: {{ .Values.deployment.cpuLimit }}
              memory: {{ .Values.deployment.memoryLimit }}
